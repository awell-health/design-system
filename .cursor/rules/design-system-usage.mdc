---
name: Design System Usage
description: Guidelines for using @awell-health/design-system components in applications
tags: [react, typescript, components, design-system, usage]
when:
  - creating new components
  - refactoring existing code
  - writing JSX/TSX
  - importing components
globs: ["**/*.{tsx,jsx,ts,js}"]
alwaysApply: true
---

# Design System Usage Guidelines

## Always Prefer Design System Components

### Priority Order
1. **Form Components**: `Input`, `Textarea`, `Select`, `Checkbox`, `Toggle`, `FormSection`, `FormContent`, `FormButtons`, `Label`, `ListInput`, `DateRangeSelect`
2. **Layout**: `Card`, `Divider`, `Modal`, `Drawer`, `Alert`, `AlertDialog`
3. **Interactive**: `Button`, `Dropdown`, `Menu`, `Tab`, `Pagination`
4. **Data Display**: `Table`, `Badge`, `Avatar`, `FileList`, `FileUpload`, `CopyText`, `SkeletonLoader`, `Spinner`, `RadialProgress`
5. **Icons**: `Icon`, `ActionIcon`, `DataPointIcon`, `Tooltip`
6. **Rich Text**: `RichText` (import separately: `@awell-health/design-system/rich-text`)

## Import Patterns
```typescript
// ✅ Good
import { Button, Card, Modal, Input, Select } from '@awell-health/design-system';
import { RichText } from '@awell-health/design-system/rich-text';

// ❌ Avoid
import * as DesignSystem from '@awell-health/design-system';
```

## Usage Examples

### Form Implementation
```typescript
// ✅ Good - Complete form using design system components
import { 
  FormContent, 
  FormSection, 
  FormButtons, 
  Label, 
  Input, 
  Button 
} from '@awell-health/design-system';

function UserProfileForm() {
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    phone: ''
  });
  const [errors, setErrors] = useState({});

  const handleSubmit = (e) => {
    e.preventDefault();
    // Form validation and submission logic
  };

  return (
    <FormContent onSubmit={handleSubmit}>
      <FormSection title="Personal Information">
        <Label htmlFor="name" required>
          Full Name
        </Label>
        <Input 
          id="name"
          type="text"
          value={formData.name}
          onChange={(e) => setFormData({...formData, name: e.target.value})}
          error={errors.name}
          placeholder="Enter your full name"
        />
        
        <Label htmlFor="email" required>
          Email Address
        </Label>
        <Input 
          id="email"
          type="email"
          value={formData.email}
          onChange={(e) => setFormData({...formData, email: e.target.value})}
          error={errors.email}
          placeholder="Enter your email address"
        />
        
        <Label htmlFor="phone">
          Phone Number
        </Label>
        <Input 
          id="phone"
          type="tel"
          value={formData.phone}
          onChange={(e) => setFormData({...formData, phone: e.target.value})}
          error={errors.phone}
          placeholder="Enter your phone number"
        />
      </FormSection>
      
      <FormButtons>
        <Button variant="secondary" type="button" onClick={onCancel}>
          Cancel
        </Button>
        <Button variant="primary" type="submit" disabled={isSubmitting}>
          {isSubmitting ? 'Saving...' : 'Save Changes'}
        </Button>
      </FormButtons>
    </FormContent>
  );
}
```

### Modal Implementation
```typescript
// ✅ Good - Complete modal with proper structure
import { Modal, Button, Alert } from '@awell-health/design-system';

function DeleteConfirmationModal({ isOpen, onClose, onConfirm, itemName }) {
  const [isDeleting, setIsDeleting] = useState(false);

  const handleConfirm = async () => {
    setIsDeleting(true);
    try {
      await onConfirm();
      onClose();
    } catch (error) {
      console.error('Delete failed:', error);
    } finally {
      setIsDeleting(false);
    }
  };

  return (
    <Modal isOpen={isOpen} onClose={onClose}>
      <Modal.Header>
        <h2 className="text-xl font-semibold text-gray-900">
          Confirm Deletion
        </h2>
      </Modal.Header>
      
      <Modal.Body>
        <div className="space-y-4">
          <Alert variant="warning">
            <p className="text-sm text-warning-800">
              This action cannot be undone. Are you sure you want to delete "{itemName}"?
            </p>
          </Alert>
          
          <p className="text-gray-600">
            This will permanently remove the item and all associated data from the system.
          </p>
        </div>
      </Modal.Body>
      
      <Modal.Footer>
        <div className="flex justify-end space-x-3">
          <Button 
            variant="secondary" 
            onClick={onClose}
            disabled={isDeleting}
          >
            Cancel
          </Button>
          <Button 
            variant="danger" 
            onClick={handleConfirm}
            disabled={isDeleting}
          >
            {isDeleting ? 'Deleting...' : 'Delete'}
          </Button>
        </div>
      </Modal.Footer>
    </Modal>
  );
}
```

### Data Table Implementation
```typescript
// ✅ Good - Complete table with design system components
import { Table, Badge, ActionIcon, Button } from '@awell-health/design-system';

function UsersTable({ users, onEdit, onDelete }) {
  return (
    <div className="space-y-4">
      <div className="flex justify-between items-center">
        <h2 className="text-xl font-semibold text-gray-900">Users</h2>
        <Button variant="primary" size="sm">
          Add New User
        </Button>
      </div>
      
      <Table>
        <Table.Header>
          <Table.Row>
            <Table.HeaderCell>Name</Table.HeaderCell>
            <Table.HeaderCell>Email</Table.HeaderCell>
            <Table.HeaderCell>Status</Table.HeaderCell>
            <Table.HeaderCell>Role</Table.HeaderCell>
            <Table.HeaderCell>Actions</Table.HeaderCell>
          </Table.Row>
        </Table.Header>
        
        <Table.Body>
          {users.map((user) => (
            <Table.Row key={user.id}>
              <Table.Cell>
                <div className="flex items-center space-x-3">
                  <Avatar 
                    src={user.avatar} 
                    alt={user.name}
                    size="sm"
                  />
                  <span className="font-medium text-gray-900">
                    {user.name}
                  </span>
                </div>
              </Table.Cell>
              
              <Table.Cell className="text-gray-600">
                {user.email}
              </Table.Cell>
              
              <Table.Cell>
                <Badge 
                  variant={user.status === 'active' ? 'success' : 'secondary'}
                  className="capitalize"
                >
                  {user.status}
                </Badge>
              </Table.Cell>
              
              <Table.Cell className="text-gray-600 capitalize">
                {user.role}
              </Table.Cell>
              
              <Table.Cell>
                <div className="flex items-center space-x-2">
                  <ActionIcon 
                    icon="edit" 
                    onClick={() => onEdit(user)}
                    size="sm"
                    variant="ghost"
                  />
                  <ActionIcon 
                    icon="delete" 
                    onClick={() => onDelete(user)}
                    size="sm"
                    variant="ghost"
                    className="text-red-600 hover:text-red-700"
                  />
                </div>
              </Table.Cell>
            </Table.Row>
          ))}
        </Table.Body>
      </Table>
    </div>
  );
}
```

## Anti-Patterns to Avoid
- ❌ Don't create custom buttons when `Button` exists
- ❌ Don't build custom forms when form components exist
- ❌ Don't use raw HTML when design system components are available
- ❌ Don't override design system styles without justification
- ❌ Don't create custom modals/dialogs

## Styling Guidelines

### Extending Components with className
```typescript
// ✅ Good - Extend design system components with custom styling
import { Card, Badge, Button } from '@awell-health/design-system';

function SpecialCard({ title, children, variant = 'default' }) {
  return (
    <Card className={cn(
      'p-6',
      variant === 'highlighted' && 'border-l-4 border-l-primary-500 bg-primary-50',
      variant === 'warning' && 'border-l-4 border-l-warning-500 bg-warning-50',
      variant === 'success' && 'border-l-4 border-l-success-500 bg-success-50'
    )}>
      <h3 className={cn(
        'text-lg font-semibold mb-3',
        variant === 'highlighted' && 'text-primary-800',
        variant === 'warning' && 'text-warning-800',
        variant === 'success' && 'text-success-800'
      )}>
        {title}
      </h3>
      {children}
    </Card>
  );
}

// ✅ Good - Conditional styling with design tokens
function StatusBadge({ status, className }) {
  return (
    <Badge className={cn(
      'px-3 py-1 rounded-full font-medium',
      status === 'active' && 'bg-success-100 text-success-800 border-success-200',
      status === 'inactive' && 'bg-gray-100 text-gray-600 border-gray-200',
      status === 'pending' && 'bg-warning-100 text-warning-800 border-warning-200',
      status === 'error' && 'bg-danger-100 text-danger-800 border-danger-200',
      className
    )}>
      {status}
    </Badge>
  );
}

// ✅ Good - Responsive design with design system components
function ResponsiveLayout({ children }) {
  return (
    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 p-4">
      {children}
    </div>
  );
}
```

### Dark Mode Support
```typescript
// ✅ Good - Dark mode compatible components
function ThemeAwareCard({ title, children }) {
  return (
    <Card className="bg-white dark:bg-gray-800 border-gray-200 dark:border-gray-700">
      <h3 className="text-gray-900 dark:text-white font-semibold mb-2">
        {title}
      </h3>
      <p className="text-gray-600 dark:text-gray-300">
        {children}
      </p>
    </Card>
  );
}
```

## Performance
- Use tree shaking: import specific components
- Lazy load `RichText` when needed
- Design system components are optimized for performance
